spring.application.name=pinapp
server.port=8080

# Config MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/client_db
spring.datasource.username=root
spring.datasource.password=mysql

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true

# Conexion a Kafka
spring.kafka.bootstrap-servers=localhost:9092

# Configuracion del Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Nombre del topico donde enviaremos eventos
# app.kafka.topic.clients=clients-topic
topic = clients-topic

# Configuracion del Consumer
spring.kafka.consumer.group-id=client-service-group
# offset-reset en earliest quiere decir que el consumidor cuando se une al grupo por primera vez
# empieza a leer los mensajes desde el PRINCIPIO de la particion
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# Login para ver los eventos por consola
logging.level.org.springframework.kafka=INFO
logging.level.com.challenge.pinapp=DEBUG

# Configuracion Actuator
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
